#!/bin/bash
# catch - Captures both stdout and stderr of a command to a file and optionally copies to clipboard
# Usage: catch output_file.txt command [args...]
# Options:
#   -c, --clipboard  Copy output to clipboard (requires clip.exe in WSL2 or xclip/pbcopy in Linux/Mac)

# Function to copy to clipboard based on environment
copy_to_clipboard() {
    local content="$1"
    
    # Check if we're in WSL
    if grep -q -i microsoft /proc/version 2>/dev/null || grep -q -i wsl /proc/version 2>/dev/null; then
        # Using Windows clip.exe from WSL - needs CRLF line endings
        printf "%s" "$content" | clip.exe 2>/dev/null
        if [ $? -eq 0 ]; then
            echo "Using clip.exe" >&2
            return 0
        else
            # Try with PowerShell as an alternative in WSL
            printf "%s" "$content" | powershell.exe -command '$input | Set-Clipboard' 2>/dev/null
            if [ $? -eq 0 ]; then
                echo "Using PowerShell" >&2
                return 0
            else
                echo "Failed to copy to clipboard via clip.exe or PowerShell" >&2
                return 1
            fi
        fi
    elif command -v xclip >/dev/null 2>&1; then
        # Linux with xclip
        printf "%s" "$content" | xclip -selection clipboard
        echo "Using xclip" >&2
        return $?
    elif command -v xsel >/dev/null 2>&1; then
        # Linux with xsel as alternative
        printf "%s" "$content" | xsel --clipboard --input
        echo "Using xsel" >&2
        return $?
    elif command -v pbcopy >/dev/null 2>&1; then
        # macOS
        printf "%s" "$content" | pbcopy
        echo "Using pbcopy" >&2
        return $?
    else
        echo "No clipboard utility found. For Linux, install xclip or xsel." >&2
        echo "For WSL, ensure clip.exe or PowerShell is accessible." >&2
        return 1
    fi
}

# Parse options
CLIPBOARD=0
PARAMS=()
HELP=0

while (( "$#" )); do
    case "$1" in
        -c|--clipboard)
            CLIPBOARD=1
            shift
            ;;
        -h|--help)
            HELP=1
            shift
            ;;
        -*|--*) # Unsupported flags
            echo "Error: Unsupported flag $1" >&2
            echo "Usage: catch [-c|--clipboard] output_file.txt command [args...]" >&2
            exit 1
            ;;
        *) # Preserve positional arguments
            PARAMS+=("$1")
            shift
            ;;
    esac
done

# Display help if requested
if [ "$HELP" -eq 1 ]; then
    cat << EOF
catch - Captures both stdout and stderr of a command to a file and optionally copies to clipboard

USAGE:
    catch [OPTIONS] output_file.txt command [args...]

OPTIONS:
    -c, --clipboard  Copy output to clipboard
    -h, --help       Display this help message

EXAMPLES:
    catch build_log.txt make            # Capture make output to build_log.txt
    catch -c errors.txt ./run_tests     # Capture test output and copy to clipboard

CLIPBOARD SUPPORT:
    - WSL2: Uses clip.exe or PowerShell Set-Clipboard
    - Linux: Requires xclip or xsel
    - macOS: Uses pbcopy
EOF
    exit 0
fi

# Set positional arguments in their proper place
set -- "${PARAMS[@]}"

# Check if enough arguments are provided
if [ $# -lt 2 ]; then
    echo "Usage: catch [-c|--clipboard] output_file.txt command [args...]" >&2
    exit 1
fi

# Extract the output filename
OUTPUT_FILE="$1"
shift

# Run the command, redirecting both stdout and stderr to the file
# Also display output in real-time to the terminal
"$@" 2>&1 | tee "$OUTPUT_FILE"

# Store the exit code of the command
EXIT_CODE=${PIPESTATUS[0]}

# Print a message indicating the command completed
echo "Command '$*' completed with exit code $EXIT_CODE" >&2
echo "Output saved to $OUTPUT_FILE" >&2

# Copy to clipboard if requested
if [ "$CLIPBOARD" -eq 1 ]; then
    echo "Attempting to copy to clipboard..." >&2
    if copy_to_clipboard "$(<"$OUTPUT_FILE")"; then
        echo "Output copied to clipboard successfully" >&2
    else
        echo "Failed to copy to clipboard" >&2
    fi
fi

# Return the original exit code from the command
exit $EXIT_CODE

